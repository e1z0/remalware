#!/bin/env perl
# REMalware (c) 2010 \dev\null. Licensed under EofNET Open Source License.
# Version 0.1

#### Version history ####
# 0.1 - Initial release.


# TODO
# update signatures
# files backup support
# mail notify
# crontab integration
# logging support
# full regexp support
# export to web page


use Getopt::Long;
use Cwd qw(abs_path);

$version = "0.1";
$basedir = abs_path();
$signatures = "$basedir/signatures";

# Set defaults
my %opt = (
		"scan" => 0,
		"clean" => 0,
                "nobad" => 0,
                "nogood" => 0,
                "noinfo" => 0,
                "nocolor" => 0,
        );

# Gather the options from the command line
GetOptions(\%opt,
		'scan=s',
		'clean',
                'nobad',
                'nogood',
                'noinfo',
                'nocolor',
                'help',
        );

# Colors
my $good = ($opt{nocolor} == 0)? "[\e[00;32mOK\e[00m]" : "[OK]" ;
my $bad = ($opt{nocolor} == 0)? "[\e[00;31m!!\e[00m]" : "[!!]" ;
my $info = ($opt{nocolor} == 0)? "[\e[00;34m--\e[00m]" : "[--]" ;

# Functions to handle the print styles
sub goodprint { print $good." ".$_[0] unless ($opt{nogood} == 1); }
sub infoprint { print $info." ".$_[0] unless ($opt{noinfo} == 1); }
sub badprint { print $bad." ".$_[0] unless ($opt{nobad} == 1); }

if (defined $opt{'help'} && $opt{'help'} == 1) { usage(); }

sub usage {
        # Shown with --help option passed
        print "\n".
                "   REMalware $version - malware/trojans scanner/remover from various web pages\n".
                "   Bug reports, feature requests, and downloads at http://null.people.bsdnet.net/stuff/remalware/\n".
                "   Created by \\dev\\null (devnull\@eofnet.lt) - Licensed under EofNET Open Source License\n".
                "\n".
                "   Actions\n".
                "      --scan <directory>   Scans specified directory\n".
                "      --clean              Scans and cleans infected files (use it with --scan option)\n".
                "      --log <log file>     Logs scanning to the specified file\n".
                "      --export <filename>  Exports log to html format\n".
                "      --cron               Especially designed to use with crontab\n".
                "\n".
                "   Other options\n".
                "      --update             Updates signature database\n".
                "      --checkversion       Checks for REMalware updates\n".
                "\n".
                "   Output Options:\n".
                "      --nogood             Remove OK responses\n".
                "      --nobad              Remove negative/suggestion responses\n".
                "      --noinfo             Remove informational responses\n".
                "      --nocolor            Don't print output in color\n".
                "\n";
        exit;
}

# MAIN

print   "\n >>  REMalware $version - \\dev\\null <devnull\@eofnet.lt> \n".
                " >>  Bug reports, feature requests, and downloads at http://null.people.bsdnet.net/stuff/remalware/\n".
                " >>  Run with '--help' for additional options\n";

checksignature();

sub checksignature {
unless (-e $signatures) {
 badprint "ERROR: Signatures file does not exist!\n";
 exit 1;
 } 
}

if (defined $opt{'scan'} && $opt{scan} ne 0) { scan(); }

sub scan {
unless (-d $opt{scan}) {
badprint " \n Specified directory does not exist!";
badprint " \n Use: $0 --scan /path/to/dir\n";
exit 1;
}

print "\n  >> Scanning for malware/exploits in ($opt{scan}) ... \n\n";
my $total = 0;
my $command = "";
open(OF, $signatures);
my(@lines) = <OF>;
  @lines = sort(@lines);
	my($line);
	foreach $line (@lines)
	{
        chomp($line);
 	my ($ext, $vir, $title) = split("::",$line);
        # search for regexp string inside the files in specified directory and subdirectories
        $command = "find $opt{scan} -name \"$ext\" -exec grep -Hn \"$vir\" {} \\;";
	open my $pipe, "$command |";
		while (<$pipe>) {
		my ($file, $line) = split(":",$_);
		badprint "FOUND: $title in file: $file line $line\n";
		# Cleanup viruses
                if (defined $opt{'clean'} && $opt{'clean'} == 1) { 
		system("sed -i 's/^.*'\"$vir\"'.*//g' $file");
			if ( $? == -1 )
			{
		          badprint "File: $file clean failed\n";
			}
			else
			{
			  goodprint "File: $file cleaned successfully!\n";
			}
		}
		$total++;
		}
		close $pipe;
}
close(OF);
print "\n\n";
if ($total > 0) { infoprint "Total threats found: $total\n"; } else { goodprint "Nothing found\n";}
}

